//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string,
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? 'http://localhost:5000';
  }

  /**
   * @return Success
   */
  areasGET(): Observable<AreasResponse> {
    let url_ = this.baseUrl + '/api/Areas';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAreasGET(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAreasGET(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<AreasResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<AreasResponse>;
        }),
      );
  }

  protected processAreasGET(
    response: HttpResponseBase,
  ): Observable<AreasResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = AreasResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<AreasResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  areasPOST(body: Area | undefined): Observable<Area> {
    let url_ = this.baseUrl + '/api/Areas';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAreasPOST(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAreasPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Area>;
            }
          } else return _observableThrow(response_) as any as Observable<Area>;
        }),
      );
  }

  protected processAreasPOST(response: HttpResponseBase): Observable<Area> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = Area.fromJS(resultData201);
          return _observableOf(result201);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Area>(null as any);
  }

  /**
   * @return Success
   */
  areasGET2(areaId: string): Observable<Area> {
    let url_ = this.baseUrl + '/api/Areas/{areaId}';
    if (areaId === undefined || areaId === null)
      throw new Error("The parameter 'areaId' must be defined.");
    url_ = url_.replace('{areaId}', encodeURIComponent('' + areaId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAreasGET2(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAreasGET2(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Area>;
            }
          } else return _observableThrow(response_) as any as Observable<Area>;
        }),
      );
  }

  protected processAreasGET2(response: HttpResponseBase): Observable<Area> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Area.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Area>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  areasPUT(areaId: string, body: Area | undefined): Observable<void> {
    let url_ = this.baseUrl + '/api/Areas/{areaId}';
    if (areaId === undefined || areaId === null)
      throw new Error("The parameter 'areaId' must be defined.");
    url_ = url_.replace('{areaId}', encodeURIComponent('' + areaId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAreasPUT(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAreasPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processAreasPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return No Content
   */
  areasDELETE(areaId: string): Observable<void> {
    let url_ = this.baseUrl + '/api/Areas/{areaId}';
    if (areaId === undefined || areaId === null)
      throw new Error("The parameter 'areaId' must be defined.");
    url_ = url_.replace('{areaId}', encodeURIComponent('' + areaId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAreasDELETE(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAreasDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processAreasDELETE(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return Success
   */
  locationsGET(): Observable<LocationsGetAllResponse> {
    let url_ = this.baseUrl + '/api/Locations';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLocationsGET(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLocationsGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e,
              ) as any as Observable<LocationsGetAllResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<LocationsGetAllResponse>;
        }),
      );
  }

  protected processLocationsGET(
    response: HttpResponseBase,
  ): Observable<LocationsGetAllResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = LocationsGetAllResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<LocationsGetAllResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  locationsPOST(body: Location | undefined): Observable<Location> {
    let url_ = this.baseUrl + '/api/Locations';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLocationsPOST(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLocationsPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Location>;
            }
          } else
            return _observableThrow(response_) as any as Observable<Location>;
        }),
      );
  }

  protected processLocationsPOST(
    response: HttpResponseBase,
  ): Observable<Location> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = Location.fromJS(resultData201);
          return _observableOf(result201);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Location>(null as any);
  }

  /**
   * @return Success
   */
  locationsGET2(locationId: string): Observable<Location> {
    let url_ = this.baseUrl + '/api/Locations/{locationId}';
    if (locationId === undefined || locationId === null)
      throw new Error("The parameter 'locationId' must be defined.");
    url_ = url_.replace('{locationId}', encodeURIComponent('' + locationId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLocationsGET2(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLocationsGET2(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Location>;
            }
          } else
            return _observableThrow(response_) as any as Observable<Location>;
        }),
      );
  }

  protected processLocationsGET2(
    response: HttpResponseBase,
  ): Observable<Location> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Location.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Location>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  locationsPUT(
    locationId: string,
    body: Location | undefined,
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/Locations/{locationId}';
    if (locationId === undefined || locationId === null)
      throw new Error("The parameter 'locationId' must be defined.");
    url_ = url_.replace('{locationId}', encodeURIComponent('' + locationId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLocationsPUT(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLocationsPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processLocationsPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return No Content
   */
  locationsDELETE(locationId: string): Observable<void> {
    let url_ = this.baseUrl + '/api/Locations/{locationId}';
    if (locationId === undefined || locationId === null)
      throw new Error("The parameter 'locationId' must be defined.");
    url_ = url_.replace('{locationId}', encodeURIComponent('' + locationId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLocationsDELETE(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLocationsDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processLocationsDELETE(
    response: HttpResponseBase,
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  area(areaId: string, body: Location[] | undefined): Observable<void> {
    let url_ = this.baseUrl + '/api/Locations/Area/{areaId}';
    if (areaId === undefined || areaId === null)
      throw new Error("The parameter 'areaId' must be defined.");
    url_ = url_.replace('{areaId}', encodeURIComponent('' + areaId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processArea(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processArea(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processArea(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return Success
   */
  ordersGET(): Observable<OrdersGetAllResponse> {
    let url_ = this.baseUrl + '/Orders';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processOrdersGET(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processOrdersGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e,
              ) as any as Observable<OrdersGetAllResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<OrdersGetAllResponse>;
        }),
      );
  }

  protected processOrdersGET(
    response: HttpResponseBase,
  ): Observable<OrdersGetAllResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = OrdersGetAllResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<OrdersGetAllResponse>(null as any);
  }

  /**
   * @return Success
   */
  ordersGET2(orderId: string): Observable<Order> {
    let url_ = this.baseUrl + '/Orders/{orderId}';
    if (orderId === undefined || orderId === null)
      throw new Error("The parameter 'orderId' must be defined.");
    url_ = url_.replace('{orderId}', encodeURIComponent('' + orderId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processOrdersGET2(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processOrdersGET2(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Order>;
            }
          } else return _observableThrow(response_) as any as Observable<Order>;
        }),
      );
  }

  protected processOrdersGET2(response: HttpResponseBase): Observable<Order> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Order.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Order>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  ordersPUT(orderId: string, body: Order | undefined): Observable<void> {
    let url_ = this.baseUrl + '/Orders/{orderId}';
    if (orderId === undefined || orderId === null)
      throw new Error("The parameter 'orderId' must be defined.");
    url_ = url_.replace('{orderId}', encodeURIComponent('' + orderId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processOrdersPUT(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processOrdersPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processOrdersPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return No Content
   */
  ordersDELETE(orderId: string): Observable<void> {
    let url_ = this.baseUrl + '/Orders/{orderId}';
    if (orderId === undefined || orderId === null)
      throw new Error("The parameter 'orderId' must be defined.");
    url_ = url_.replace('{orderId}', encodeURIComponent('' + orderId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processOrdersDELETE(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processOrdersDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processOrdersDELETE(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return Success
   */
  rolls(orderId: string): Observable<void> {
    let url_ = this.baseUrl + '/Orders/{orderId}/rolls';
    if (orderId === undefined || orderId === null)
      throw new Error("The parameter 'orderId' must be defined.");
    url_ = url_.replace('{orderId}', encodeURIComponent('' + orderId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRolls(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRolls(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processRolls(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  location(
    locationId: string,
    userId: string,
    body: RollOfSteel[] | undefined,
  ): Observable<void> {
    let url_ = this.baseUrl + '/Orders/user/{userId}/location/{locationId}';
    if (locationId === undefined || locationId === null)
      throw new Error("The parameter 'locationId' must be defined.");
    url_ = url_.replace('{locationId}', encodeURIComponent('' + locationId));
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLocation(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLocation(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processLocation(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return Success
   */
  rollsOfSteelGET(): Observable<RollsOfSteelGetAllResponse> {
    let url_ = this.baseUrl + '/api/RollsOfSteel';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRollsOfSteelGET(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRollsOfSteelGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e,
              ) as any as Observable<RollsOfSteelGetAllResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<RollsOfSteelGetAllResponse>;
        }),
      );
  }

  protected processRollsOfSteelGET(
    response: HttpResponseBase,
  ): Observable<RollsOfSteelGetAllResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = RollsOfSteelGetAllResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<RollsOfSteelGetAllResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  rollsOfSteelPOST(body: RollOfSteel | undefined): Observable<RollOfSteel> {
    let url_ = this.baseUrl + '/api/RollsOfSteel';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRollsOfSteelPOST(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRollsOfSteelPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<RollOfSteel>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<RollOfSteel>;
        }),
      );
  }

  protected processRollsOfSteelPOST(
    response: HttpResponseBase,
  ): Observable<RollOfSteel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = RollOfSteel.fromJS(resultData201);
          return _observableOf(result201);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<RollOfSteel>(null as any);
  }

  /**
   * @return Success
   */
  rollsOfSteelGET2(rollOfSteelId: string): Observable<RollOfSteel> {
    let url_ = this.baseUrl + '/api/RollsOfSteel/{rollOfSteelId}';
    if (rollOfSteelId === undefined || rollOfSteelId === null)
      throw new Error("The parameter 'rollOfSteelId' must be defined.");
    url_ = url_.replace(
      '{rollOfSteelId}',
      encodeURIComponent('' + rollOfSteelId),
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRollsOfSteelGET2(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRollsOfSteelGET2(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<RollOfSteel>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<RollOfSteel>;
        }),
      );
  }

  protected processRollsOfSteelGET2(
    response: HttpResponseBase,
  ): Observable<RollOfSteel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = RollOfSteel.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<RollOfSteel>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  rollsOfSteelPUT(
    rollOfSteelId: string,
    body: RollOfSteel | undefined,
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/RollsOfSteel/{rollOfSteelId}';
    if (rollOfSteelId === undefined || rollOfSteelId === null)
      throw new Error("The parameter 'rollOfSteelId' must be defined.");
    url_ = url_.replace(
      '{rollOfSteelId}',
      encodeURIComponent('' + rollOfSteelId),
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRollsOfSteelPUT(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRollsOfSteelPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processRollsOfSteelPUT(
    response: HttpResponseBase,
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return No Content
   */
  rollsOfSteelDELETE(rollOfSteelId: string): Observable<void> {
    let url_ = this.baseUrl + '/api/RollsOfSteel/{rollOfSteelId}';
    if (rollOfSteelId === undefined || rollOfSteelId === null)
      throw new Error("The parameter 'rollOfSteelId' must be defined.");
    url_ = url_.replace(
      '{rollOfSteelId}',
      encodeURIComponent('' + rollOfSteelId),
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRollsOfSteelDELETE(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRollsOfSteelDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processRollsOfSteelDELETE(
    response: HttpResponseBase,
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return Success
   */
  trucksGET(): Observable<TrucksGetAllResponse> {
    let url_ = this.baseUrl + '/api/Trucks';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processTrucksGET(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processTrucksGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e,
              ) as any as Observable<TrucksGetAllResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<TrucksGetAllResponse>;
        }),
      );
  }

  protected processTrucksGET(
    response: HttpResponseBase,
  ): Observable<TrucksGetAllResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = TrucksGetAllResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<TrucksGetAllResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  trucksPOST(body: Truck | undefined): Observable<Truck> {
    let url_ = this.baseUrl + '/api/Trucks';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processTrucksPOST(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processTrucksPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Truck>;
            }
          } else return _observableThrow(response_) as any as Observable<Truck>;
        }),
      );
  }

  protected processTrucksPOST(response: HttpResponseBase): Observable<Truck> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = Truck.fromJS(resultData201);
          return _observableOf(result201);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Truck>(null as any);
  }

  /**
   * @return Success
   */
  trucksGET2(truckId: string): Observable<Truck> {
    let url_ = this.baseUrl + '/api/Trucks/{truckId}';
    if (truckId === undefined || truckId === null)
      throw new Error("The parameter 'truckId' must be defined.");
    url_ = url_.replace('{truckId}', encodeURIComponent('' + truckId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processTrucksGET2(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processTrucksGET2(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Truck>;
            }
          } else return _observableThrow(response_) as any as Observable<Truck>;
        }),
      );
  }

  protected processTrucksGET2(response: HttpResponseBase): Observable<Truck> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = Truck.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<Truck>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  trucksPUT(truckId: string, body: Truck | undefined): Observable<void> {
    let url_ = this.baseUrl + '/api/Trucks/{truckId}';
    if (truckId === undefined || truckId === null)
      throw new Error("The parameter 'truckId' must be defined.");
    url_ = url_.replace('{truckId}', encodeURIComponent('' + truckId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processTrucksPUT(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processTrucksPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processTrucksPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return No Content
   */
  trucksDELETE(truckId: string): Observable<void> {
    let url_ = this.baseUrl + '/api/Trucks/{truckId}';
    if (truckId === undefined || truckId === null)
      throw new Error("The parameter 'truckId' must be defined.");
    url_ = url_.replace('{truckId}', encodeURIComponent('' + truckId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processTrucksDELETE(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processTrucksDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processTrucksDELETE(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  usersPOST(body: User | undefined): Observable<void> {
    let url_ = this.baseUrl + '/Users';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUsersPOST(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUsersPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processUsersPOST(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return Success
   */
  usersGET(): Observable<UsersGetAllResponse> {
    let url_ = this.baseUrl + '/Users';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUsersGET(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUsersGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e,
              ) as any as Observable<UsersGetAllResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<UsersGetAllResponse>;
        }),
      );
  }

  protected processUsersGET(
    response: HttpResponseBase,
  ): Observable<UsersGetAllResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UsersGetAllResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<UsersGetAllResponse>(null as any);
  }

  /**
   * @return Success
   */
  usersGET2(userId: string): Observable<User> {
    let url_ = this.baseUrl + '/Users/{userId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUsersGET2(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUsersGET2(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<User>;
            }
          } else return _observableThrow(response_) as any as Observable<User>;
        }),
      );
  }

  protected processUsersGET2(response: HttpResponseBase): Observable<User> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = User.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<User>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  usersPUT(userId: string, body: User | undefined): Observable<void> {
    let url_ = this.baseUrl + '/Users/{userId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUsersPUT(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUsersPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processUsersPUT(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @return No Content
   */
  usersDELETE(userId: string): Observable<void> {
    let url_ = this.baseUrl + '/Users/{userId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUsersDELETE(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUsersDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        }),
      );
  }

  protected processUsersDELETE(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        }),
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  login(body: LoginRequest | undefined): Observable<LoginResponse> {
    let url_ = this.baseUrl + '/Users/login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLogin(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLogin(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<LoginResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<LoginResponse>;
        }),
      );
  }

  protected processLogin(
    response: HttpResponseBase,
  ): Observable<LoginResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = LoginResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401,
          );
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<LoginResponse>(null as any);
  }

  /**
   * @return Success
   */
  getAllUsernames(): Observable<UsersGetAllUsernamesResponse> {
    let url_ = this.baseUrl + '/Users/getAllUsernames';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllUsernames(response_);
        }),
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllUsernames(response_ as any);
            } catch (e) {
              return _observableThrow(
                e,
              ) as any as Observable<UsersGetAllUsernamesResponse>;
            }
          } else
            return _observableThrow(
              response_,
            ) as any as Observable<UsersGetAllUsernamesResponse>;
        }),
      );
  }

  protected processGetAllUsernames(
    response: HttpResponseBase,
  ): Observable<UsersGetAllUsernamesResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
          ? (response as any).error
          : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UsersGetAllUsernamesResponse.fromJS(resultData200);
          return _observableOf(result200);
        }),
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers,
          );
        }),
      );
    }
    return _observableOf<UsersGetAllUsernamesResponse>(null as any);
  }
}

export class Area implements IArea {
  areaId?: string | undefined;
  locations?: Location[] | undefined;
  trucks?: Truck[] | undefined;

  constructor(data?: IArea) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.areaId = _data['areaId'];
      if (Array.isArray(_data['locations'])) {
        this.locations = [] as any;
        for (let item of _data['locations'])
          this.locations!.push(Location.fromJS(item));
      }
      if (Array.isArray(_data['trucks'])) {
        this.trucks = [] as any;
        for (let item of _data['trucks']) this.trucks!.push(Truck.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Area {
    data = typeof data === 'object' ? data : {};
    let result = new Area();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['areaId'] = this.areaId;
    if (Array.isArray(this.locations)) {
      data['locations'] = [];
      for (let item of this.locations) data['locations'].push(item.toJSON());
    }
    if (Array.isArray(this.trucks)) {
      data['trucks'] = [];
      for (let item of this.trucks) data['trucks'].push(item.toJSON());
    }
    return data;
  }
}

export interface IArea {
  areaId?: string | undefined;
  locations?: Location[] | undefined;
  trucks?: Truck[] | undefined;
}

export class AreasResponse implements IAreasResponse {
  areas?: Area[] | undefined;

  constructor(data?: IAreasResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['areas'])) {
        this.areas = [] as any;
        for (let item of _data['areas']) this.areas!.push(Area.fromJS(item));
      }
    }
  }

  static fromJS(data: any): AreasResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AreasResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.areas)) {
      data['areas'] = [];
      for (let item of this.areas) data['areas'].push(item.toJSON());
    }
    return data;
  }
}

export interface IAreasResponse {
  areas?: Area[] | undefined;
}

export class Location implements ILocation {
  locationId?: string | undefined;
  areaId?: string | undefined;
  locationType?: LocationType;
  rollsOfSteel?: RollOfSteel[] | undefined;
  destinationOrders?: Order[] | undefined;

  constructor(data?: ILocation) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.locationId = _data['locationId'];
      this.areaId = _data['areaId'];
      this.locationType = _data['locationType'];
      if (Array.isArray(_data['rollsOfSteel'])) {
        this.rollsOfSteel = [] as any;
        for (let item of _data['rollsOfSteel'])
          this.rollsOfSteel!.push(RollOfSteel.fromJS(item));
      }
      if (Array.isArray(_data['destinationOrders'])) {
        this.destinationOrders = [] as any;
        for (let item of _data['destinationOrders'])
          this.destinationOrders!.push(Order.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Location {
    data = typeof data === 'object' ? data : {};
    let result = new Location();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['locationId'] = this.locationId;
    data['areaId'] = this.areaId;
    data['locationType'] = this.locationType;
    if (Array.isArray(this.rollsOfSteel)) {
      data['rollsOfSteel'] = [];
      for (let item of this.rollsOfSteel)
        data['rollsOfSteel'].push(item.toJSON());
    }
    if (Array.isArray(this.destinationOrders)) {
      data['destinationOrders'] = [];
      for (let item of this.destinationOrders)
        data['destinationOrders'].push(item.toJSON());
    }
    return data;
  }
}

export interface ILocation {
  locationId?: string | undefined;
  areaId?: string | undefined;
  locationType?: LocationType;
  rollsOfSteel?: RollOfSteel[] | undefined;
  destinationOrders?: Order[] | undefined;
}

export enum LocationType {
  Storage = 'Storage',
  Machine = 'Machine',
}

export class LocationsGetAllResponse implements ILocationsGetAllResponse {
  locations?: Location[] | undefined;

  constructor(data?: ILocationsGetAllResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['locations'])) {
        this.locations = [] as any;
        for (let item of _data['locations'])
          this.locations!.push(Location.fromJS(item));
      }
    }
  }

  static fromJS(data: any): LocationsGetAllResponse {
    data = typeof data === 'object' ? data : {};
    let result = new LocationsGetAllResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.locations)) {
      data['locations'] = [];
      for (let item of this.locations) data['locations'].push(item.toJSON());
    }
    return data;
  }
}

export interface ILocationsGetAllResponse {
  locations?: Location[] | undefined;
}

export class LoginRequest implements ILoginRequest {
  username?: string | undefined;
  password?: string | undefined;

  constructor(data?: ILoginRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data['username'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): LoginRequest {
    data = typeof data === 'object' ? data : {};
    let result = new LoginRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['username'] = this.username;
    data['password'] = this.password;
    return data;
  }
}

export interface ILoginRequest {
  username?: string | undefined;
  password?: string | undefined;
}

export class LoginResponse implements ILoginResponse {
  token?: string | undefined;

  constructor(data?: ILoginResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data['token'];
    }
  }

  static fromJS(data: any): LoginResponse {
    data = typeof data === 'object' ? data : {};
    let result = new LoginResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['token'] = this.token;
    return data;
  }
}

export interface ILoginResponse {
  token?: string | undefined;
}

export class Order implements IOrder {
  orderId?: string | undefined;
  userID?: string | undefined;
  orderStatus?: OrderStatus;
  destinationId?: string | undefined;
  createdAt?: Date;
  orderRolls?: OrderRoll[] | undefined;
  truckOrderAssignments?: TruckOrderAssignment[] | undefined;

  constructor(data?: IOrder) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.userID = _data['userID'];
      this.orderStatus = _data['orderStatus'];
      this.destinationId = _data['destinationId'];
      this.createdAt = _data['createdAt']
        ? new Date(_data['createdAt'].toString())
        : <any>undefined;
      if (Array.isArray(_data['orderRolls'])) {
        this.orderRolls = [] as any;
        for (let item of _data['orderRolls'])
          this.orderRolls!.push(OrderRoll.fromJS(item));
      }
      if (Array.isArray(_data['truckOrderAssignments'])) {
        this.truckOrderAssignments = [] as any;
        for (let item of _data['truckOrderAssignments'])
          this.truckOrderAssignments!.push(TruckOrderAssignment.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Order {
    data = typeof data === 'object' ? data : {};
    let result = new Order();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['userID'] = this.userID;
    data['orderStatus'] = this.orderStatus;
    data['destinationId'] = this.destinationId;
    data['createdAt'] = this.createdAt
      ? this.createdAt.toISOString()
      : <any>undefined;
    if (Array.isArray(this.orderRolls)) {
      data['orderRolls'] = [];
      for (let item of this.orderRolls) data['orderRolls'].push(item.toJSON());
    }
    if (Array.isArray(this.truckOrderAssignments)) {
      data['truckOrderAssignments'] = [];
      for (let item of this.truckOrderAssignments)
        data['truckOrderAssignments'].push(item.toJSON());
    }
    return data;
  }
}

export interface IOrder {
  orderId?: string | undefined;
  userID?: string | undefined;
  orderStatus?: OrderStatus;
  destinationId?: string | undefined;
  createdAt?: Date;
  orderRolls?: OrderRoll[] | undefined;
  truckOrderAssignments?: TruckOrderAssignment[] | undefined;
}

export class OrderRoll implements IOrderRoll {
  orderRollId?: number;
  orderId?: string | undefined;
  rollOfSteelId?: string | undefined;
  orderRollStatus?: OrderRollStatus;

  constructor(data?: IOrderRoll) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderRollId = _data['orderRollId'];
      this.orderId = _data['orderId'];
      this.rollOfSteelId = _data['rollOfSteelId'];
      this.orderRollStatus = _data['orderRollStatus'];
    }
  }

  static fromJS(data: any): OrderRoll {
    data = typeof data === 'object' ? data : {};
    let result = new OrderRoll();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderRollId'] = this.orderRollId;
    data['orderId'] = this.orderId;
    data['rollOfSteelId'] = this.rollOfSteelId;
    data['orderRollStatus'] = this.orderRollStatus;
    return data;
  }
}

export interface IOrderRoll {
  orderRollId?: number;
  orderId?: string | undefined;
  rollOfSteelId?: string | undefined;
  orderRollStatus?: OrderRollStatus;
}

export enum OrderRollStatus {
  Pending = 'Pending',
  Delivered = 'Delivered',
  Cancelled = 'Cancelled',
}

export enum OrderStatus {
  Pending = 'Pending',
  PartiallyDelivered = 'PartiallyDelivered',
  Delivered = 'Delivered',
  Cancelled = 'Cancelled',
}

export class OrdersGetAllResponse implements IOrdersGetAllResponse {
  orders?: Order[] | undefined;

  constructor(data?: IOrdersGetAllResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['orders'])) {
        this.orders = [] as any;
        for (let item of _data['orders']) this.orders!.push(Order.fromJS(item));
      }
    }
  }

  static fromJS(data: any): OrdersGetAllResponse {
    data = typeof data === 'object' ? data : {};
    let result = new OrdersGetAllResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.orders)) {
      data['orders'] = [];
      for (let item of this.orders) data['orders'].push(item.toJSON());
    }
    return data;
  }
}

export interface IOrdersGetAllResponse {
  orders?: Order[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class RollOfSteel implements IRollOfSteel {
  rollOfSteelId?: string | undefined;
  currentLocationId?: string | undefined;
  rollStatus?: RollStatus;
  currentLocation?: Location;
  orderRolls?: OrderRoll[] | undefined;

  constructor(data?: IRollOfSteel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.rollOfSteelId = _data['rollOfSteelId'];
      this.currentLocationId = _data['currentLocationId'];
      this.rollStatus = _data['rollStatus'];
      this.currentLocation = _data['currentLocation']
        ? Location.fromJS(_data['currentLocation'])
        : <any>undefined;
      if (Array.isArray(_data['orderRolls'])) {
        this.orderRolls = [] as any;
        for (let item of _data['orderRolls'])
          this.orderRolls!.push(OrderRoll.fromJS(item));
      }
    }
  }

  static fromJS(data: any): RollOfSteel {
    data = typeof data === 'object' ? data : {};
    let result = new RollOfSteel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['rollOfSteelId'] = this.rollOfSteelId;
    data['currentLocationId'] = this.currentLocationId;
    data['rollStatus'] = this.rollStatus;
    data['currentLocation'] = this.currentLocation
      ? this.currentLocation.toJSON()
      : <any>undefined;
    if (Array.isArray(this.orderRolls)) {
      data['orderRolls'] = [];
      for (let item of this.orderRolls) data['orderRolls'].push(item.toJSON());
    }
    return data;
  }
}

export interface IRollOfSteel {
  rollOfSteelId?: string | undefined;
  currentLocationId?: string | undefined;
  rollStatus?: RollStatus;
  currentLocation?: Location;
  orderRolls?: OrderRoll[] | undefined;
}

export enum RollStatus {
  Processed = 'Processed',
  Raw = 'Raw',
}

export class RollsOfSteelGetAllResponse implements IRollsOfSteelGetAllResponse {
  rollsOfSteel?: RollOfSteel[] | undefined;

  constructor(data?: IRollsOfSteelGetAllResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['rollsOfSteel'])) {
        this.rollsOfSteel = [] as any;
        for (let item of _data['rollsOfSteel'])
          this.rollsOfSteel!.push(RollOfSteel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): RollsOfSteelGetAllResponse {
    data = typeof data === 'object' ? data : {};
    let result = new RollsOfSteelGetAllResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.rollsOfSteel)) {
      data['rollsOfSteel'] = [];
      for (let item of this.rollsOfSteel)
        data['rollsOfSteel'].push(item.toJSON());
    }
    return data;
  }
}

export interface IRollsOfSteelGetAllResponse {
  rollsOfSteel?: RollOfSteel[] | undefined;
}

export class Truck implements ITruck {
  truckId?: string | undefined;
  currentAreaId?: string | undefined;
  truckUsers?: TruckUser[] | undefined;
  truckOrderAssignments?: TruckOrderAssignment[] | undefined;
status: any;

  constructor(data?: ITruck) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.truckId = _data['truckId'];
      this.currentAreaId = _data['currentAreaId'];
      if (Array.isArray(_data['truckUsers'])) {
        this.truckUsers = [] as any;
        for (let item of _data['truckUsers'])
          this.truckUsers!.push(TruckUser.fromJS(item));
      }
      if (Array.isArray(_data['truckOrderAssignments'])) {
        this.truckOrderAssignments = [] as any;
        for (let item of _data['truckOrderAssignments'])
          this.truckOrderAssignments!.push(TruckOrderAssignment.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Truck {
    data = typeof data === 'object' ? data : {};
    let result = new Truck();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['truckId'] = this.truckId;
    data['currentAreaId'] = this.currentAreaId;
    if (Array.isArray(this.truckUsers)) {
      data['truckUsers'] = [];
      for (let item of this.truckUsers) data['truckUsers'].push(item.toJSON());
    }
    if (Array.isArray(this.truckOrderAssignments)) {
      data['truckOrderAssignments'] = [];
      for (let item of this.truckOrderAssignments)
        data['truckOrderAssignments'].push(item.toJSON());
    }
    return data;
  }
}

export interface ITruck {
  truckId?: string | undefined;
  currentAreaId?: string | undefined;
  truckUsers?: TruckUser[] | undefined;
  truckOrderAssignments?: TruckOrderAssignment[] | undefined;
}

export class TruckOrderAssignment implements ITruckOrderAssignment {
  truckOrderAssignmentId?: number;
  truckId?: string | undefined;
  orderId?: string | undefined;
  assignmentAt?: Date | undefined;
  unassignmentAt?: Date | undefined;

  constructor(data?: ITruckOrderAssignment) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.truckOrderAssignmentId = _data['truckOrderAssignmentId'];
      this.truckId = _data['truckId'];
      this.orderId = _data['orderId'];
      this.assignmentAt = _data['assignmentAt']
        ? new Date(_data['assignmentAt'].toString())
        : <any>undefined;
      this.unassignmentAt = _data['unassignmentAt']
        ? new Date(_data['unassignmentAt'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): TruckOrderAssignment {
    data = typeof data === 'object' ? data : {};
    let result = new TruckOrderAssignment();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['truckOrderAssignmentId'] = this.truckOrderAssignmentId;
    data['truckId'] = this.truckId;
    data['orderId'] = this.orderId;
    data['assignmentAt'] = this.assignmentAt
      ? this.assignmentAt.toISOString()
      : <any>undefined;
    data['unassignmentAt'] = this.unassignmentAt
      ? this.unassignmentAt.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface ITruckOrderAssignment {
  truckOrderAssignmentId?: number;
  truckId?: string | undefined;
  orderId?: string | undefined;
  assignmentAt?: Date | undefined;
  unassignmentAt?: Date | undefined;
}

export class TruckUser implements ITruckUser {
  truckUserId?: number;
  truckId?: string | undefined;
  userId?: string | undefined;
  isAssigned?: boolean;
  dateAssigned?: Date | undefined;
  dateUnassigned?: Date | undefined;

  constructor(data?: ITruckUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.truckUserId = _data['truckUserId'];
      this.truckId = _data['truckId'];
      this.userId = _data['userId'];
      this.isAssigned = _data['isAssigned'];
      this.dateAssigned = _data['dateAssigned']
        ? new Date(_data['dateAssigned'].toString())
        : <any>undefined;
      this.dateUnassigned = _data['dateUnassigned']
        ? new Date(_data['dateUnassigned'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): TruckUser {
    data = typeof data === 'object' ? data : {};
    let result = new TruckUser();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['truckUserId'] = this.truckUserId;
    data['truckId'] = this.truckId;
    data['userId'] = this.userId;
    data['isAssigned'] = this.isAssigned;
    data['dateAssigned'] = this.dateAssigned
      ? this.dateAssigned.toISOString()
      : <any>undefined;
    data['dateUnassigned'] = this.dateUnassigned
      ? this.dateUnassigned.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface ITruckUser {
  truckUserId?: number;
  truckId?: string | undefined;
  userId?: string | undefined;
  isAssigned?: boolean;
  dateAssigned?: Date | undefined;
  dateUnassigned?: Date | undefined;
}

export class TrucksGetAllResponse implements ITrucksGetAllResponse {
  trucks?: Truck[] | undefined;

  constructor(data?: ITrucksGetAllResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['trucks'])) {
        this.trucks = [] as any;
        for (let item of _data['trucks']) this.trucks!.push(Truck.fromJS(item));
      }
    }
  }

  static fromJS(data: any): TrucksGetAllResponse {
    data = typeof data === 'object' ? data : {};
    let result = new TrucksGetAllResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.trucks)) {
      data['trucks'] = [];
      for (let item of this.trucks) data['trucks'].push(item.toJSON());
    }
    return data;
  }
}

export interface ITrucksGetAllResponse {
  trucks?: Truck[] | undefined;
}

export class User implements IUser {
  userId?: string | undefined;
  role?: UserRole;
  username?: string | undefined;
  passwordHash?: string | undefined;
  readonly trucks?: Truck[] | undefined;
  truckUsers?: TruckUser[] | undefined;
  orders?: Order[] | undefined;

  constructor(data?: IUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.role = _data['role'];
      this.username = _data['username'];
      this.passwordHash = _data['passwordHash'];
      if (Array.isArray(_data['trucks'])) {
        (<any>this).trucks = [] as any;
        for (let item of _data['trucks'])
          (<any>this).trucks!.push(Truck.fromJS(item));
      }
      if (Array.isArray(_data['truckUsers'])) {
        this.truckUsers = [] as any;
        for (let item of _data['truckUsers'])
          this.truckUsers!.push(TruckUser.fromJS(item));
      }
      if (Array.isArray(_data['orders'])) {
        this.orders = [] as any;
        for (let item of _data['orders']) this.orders!.push(Order.fromJS(item));
      }
    }
  }

  static fromJS(data: any): User {
    data = typeof data === 'object' ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['role'] = this.role;
    data['username'] = this.username;
    data['passwordHash'] = this.passwordHash;
    if (Array.isArray(this.trucks)) {
      data['trucks'] = [];
      for (let item of this.trucks) data['trucks'].push(item.toJSON());
    }
    if (Array.isArray(this.truckUsers)) {
      data['truckUsers'] = [];
      for (let item of this.truckUsers) data['truckUsers'].push(item.toJSON());
    }
    if (Array.isArray(this.orders)) {
      data['orders'] = [];
      for (let item of this.orders) data['orders'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUser {
  userId?: string | undefined;
  role?: UserRole;
  username?: string | undefined;
  passwordHash?: string | undefined;
  trucks?: Truck[] | undefined;
  truckUsers?: TruckUser[] | undefined;
  orders?: Order[] | undefined;
}

export enum UserRole {
  Admin = 'Admin',
  User = 'User',
}

export class UsersGetAllResponse implements IUsersGetAllResponse {
  users?: User[] | undefined;

  constructor(data?: IUsersGetAllResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['users'])) {
        this.users = [] as any;
        for (let item of _data['users']) this.users!.push(User.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UsersGetAllResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UsersGetAllResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.users)) {
      data['users'] = [];
      for (let item of this.users) data['users'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUsersGetAllResponse {
  users?: User[] | undefined;
}

export class UsersGetAllUsernamesResponse
  implements IUsersGetAllUsernamesResponse
{
  usernames?: string[] | undefined;

  constructor(data?: IUsersGetAllUsernamesResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['usernames'])) {
        this.usernames = [] as any;
        for (let item of _data['usernames']) this.usernames!.push(item);
      }
    }
  }

  static fromJS(data: any): UsersGetAllUsernamesResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UsersGetAllUsernamesResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.usernames)) {
      data['usernames'] = [];
      for (let item of this.usernames) data['usernames'].push(item);
    }
    return data;
  }
}

export interface IUsersGetAllUsernamesResponse {
  usernames?: string[] | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null),
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
