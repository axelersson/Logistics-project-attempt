// <auto-generated />
using System;
using LogisticsApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(LogisticsDBContext))]
    partial class LogisticsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Area", b =>
                {
                    b.Property<string>("AreaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AreaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = "A1-f10c689a-75b6-4808-80ab-b13aaf6e92ef",
                            Name = "North Warehouse"
                        },
                        new
                        {
                            AreaId = "A2-06f53ced-11b6-4539-9af4-07e54c8ca2d2",
                            Name = "South Warehouse"
                        });
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("AreaId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = "L1-86af138b-e7ae-4c74-a1ba-8a5378d503f7",
                            AreaId = "A1-f10c689a-75b6-4808-80ab-b13aaf6e92ef",
                            LocationType = 0
                        },
                        new
                        {
                            LocationId = "L2-0ac984a6-09e7-4d1e-ab76-a1dfa9dface3",
                            AreaId = "A2-06f53ced-11b6-4539-9af4-07e54c8ca2d2",
                            LocationType = 1
                        });
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FromLocId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<string>("ToLocId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("FromLocId");

                    b.HasIndex("ToLocId");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = "O1-7999b9ad-9d6a-463a-971b-436c5ff7f738",
                            CreatedAt = new DateTime(2024, 2, 22, 10, 32, 56, 156, DateTimeKind.Utc).AddTicks(6830),
                            FromLocId = "L1-86af138b-e7ae-4c74-a1ba-8a5378d503f7",
                            OrderStatus = 0,
                            Pieces = 7,
                            ToLocId = "L2-0ac984a6-09e7-4d1e-ab76-a1dfa9dface3",
                            UserID = "U1-c7615ea8-918e-414e-9789-bb581184a45b"
                        });
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Property<string>("TruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CurrentAreaId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TruckId");

                    b.HasIndex("CurrentAreaId");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            TruckId = "T1-f699e895-3185-4d1a-9cee-99e9788e192c",
                            CurrentAreaId = "A1-f10c689a-75b6-4808-80ab-b13aaf6e92ef"
                        },
                        new
                        {
                            TruckId = "T2-c49bc780-5eff-4926-99a0-b46eba2deae0",
                            CurrentAreaId = "A2-06f53ced-11b6-4539-9af4-07e54c8ca2d2"
                        });
                });

            modelBuilder.Entity("TruckOrderAssignment", b =>
                {
                    b.Property<int>("TruckOrderAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TruckId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UnassignedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TruckOrderAssignmentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckOrderAssignments");

                    b.HasData(
                        new
                        {
                            TruckOrderAssignmentId = 1,
                            AssignedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = true,
                            OrderId = "O1-7999b9ad-9d6a-463a-971b-436c5ff7f738",
                            TruckId = "T1-f699e895-3185-4d1a-9cee-99e9788e192c"
                        });
                });

            modelBuilder.Entity("TruckUser", b =>
                {
                    b.Property<int>("TruckUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UnassignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TruckUserId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UserId");

                    b.ToTable("TruckUsers");

                    b.HasData(
                        new
                        {
                            TruckUserId = 1,
                            AssignedAt = new DateTime(2024, 2, 22, 10, 32, 56, 156, DateTimeKind.Utc).AddTicks(6850),
                            IsAssigned = true,
                            TruckId = "T1-f699e895-3185-4d1a-9cee-99e9788e192c",
                            UserId = "U1-c7615ea8-918e-414e-9789-bb581184a45b"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "U1-c7615ea8-918e-414e-9789-bb581184a45b",
                            PasswordHash = "hashedPassword1",
                            Role = 0,
                            Username = "adminUser"
                        },
                        new
                        {
                            UserId = "U2-22236e78-bcc1-4e45-ad10-254534e3940b",
                            PasswordHash = "hashedPassword2",
                            Role = 1,
                            Username = "standardUser"
                        });
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany("Locations")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Location", "FromLocation")
                        .WithMany("FromOrders")
                        .HasForeignKey("FromLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", "ToLocation")
                        .WithMany("ToOrders")
                        .HasForeignKey("ToLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.HasOne("Area", "CurrentArea")
                        .WithMany("Trucks")
                        .HasForeignKey("CurrentAreaId");

                    b.Navigation("CurrentArea");
                });

            modelBuilder.Entity("TruckOrderAssignment", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("TruckOrderAssignments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Truck", "Truck")
                        .WithMany("TruckOrderAssignments")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckUser", b =>
                {
                    b.HasOne("Truck", "Truck")
                        .WithMany("TruckUsers")
                        .HasForeignKey("TruckId");

                    b.HasOne("User", "User")
                        .WithMany("TruckUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Area", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("FromOrders");

                    b.Navigation("ToOrders");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("TruckOrderAssignments");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Navigation("TruckOrderAssignments");

                    b.Navigation("TruckUsers");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TruckUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
