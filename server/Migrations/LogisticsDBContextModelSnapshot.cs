// <auto-generated />
using System;
using LogisticsApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(LogisticsDBContext))]
    partial class LogisticsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Area", b =>
                {
                    b.Property<string>("AreaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AreaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = "A1-3fa743c6-02a6-4a1d-8236-b008a0e6eff8",
                            Name = "North Warehouse"
                        },
                        new
                        {
                            AreaId = "A2-ce5f9f7b-5252-4f32-ae6b-68179ca22353",
                            Name = "South Warehouse"
                        });
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("AreaId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = "L1-a551801c-84a2-4b45-b9e2-a8d1699c23ef",
                            AreaId = "A1-3fa743c6-02a6-4a1d-8236-b008a0e6eff8",
                            LocationType = 0
                        },
                        new
                        {
                            LocationId = "L2-ebc1eab8-f1b6-43a6-ba1d-12768b3be325",
                            AreaId = "A2-ce5f9f7b-5252-4f32-ae6b-68179ca22353",
                            LocationType = 1
                        });
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = "O1-cd6d1758-773e-44b0-956b-17c4bb3261cf",
                            CreatedAt = new DateTime(2024, 2, 21, 12, 50, 12, 455, DateTimeKind.Utc).AddTicks(5748),
                            DestinationId = "L1-a551801c-84a2-4b45-b9e2-a8d1699c23ef",
                            OrderStatus = 0,
                            UserID = "U1-b83a8603-fa25-4e0e-9a72-6653e428da08"
                        });
                });

            modelBuilder.Entity("OrderRoll", b =>
                {
                    b.Property<int>("OrderRollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OrderRollStatus")
                        .HasColumnType("int");

                    b.Property<string>("RollOfSteelId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderRollId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RollOfSteelId");

                    b.ToTable("OrderRolls");

                    b.HasData(
                        new
                        {
                            OrderRollId = 1,
                            OrderId = "O1-cd6d1758-773e-44b0-956b-17c4bb3261cf",
                            OrderRollStatus = 0,
                            RollOfSteelId = "R1-45ece56d-5c02-4a5f-9571-5f0d706e1094"
                        });
                });

            modelBuilder.Entity("RollOfSteel", b =>
                {
                    b.Property<string>("RollOfSteelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CurrentLocationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RollStatus")
                        .HasColumnType("int");

                    b.HasKey("RollOfSteelId");

                    b.HasIndex("CurrentLocationId");

                    b.ToTable("RollsOfSteel");

                    b.HasData(
                        new
                        {
                            RollOfSteelId = "R1-45ece56d-5c02-4a5f-9571-5f0d706e1094",
                            CurrentLocationId = "L1-a551801c-84a2-4b45-b9e2-a8d1699c23ef",
                            RollStatus = 1
                        });
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Property<string>("TruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CurrentAreaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TruckId");

                    b.HasIndex("CurrentAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            TruckId = "T1-c2be324f-dd5c-46b0-b768-26a3741954b3",
                            CurrentAreaId = "A1-3fa743c6-02a6-4a1d-8236-b008a0e6eff8"
                        },
                        new
                        {
                            TruckId = "T2-cc4f2cae-3c8f-4180-95b0-b1c6eea00fbd",
                            CurrentAreaId = "A2-ce5f9f7b-5252-4f32-ae6b-68179ca22353"
                        });
                });

            modelBuilder.Entity("TruckOrderAssignment", b =>
                {
                    b.Property<int>("TruckOrderAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TruckId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UnassignmentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TruckOrderAssignmentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckOrderAssignments");

                    b.HasData(
                        new
                        {
                            TruckOrderAssignmentId = 1,
                            OrderId = "O1-cd6d1758-773e-44b0-956b-17c4bb3261cf",
                            TruckId = "T1-c2be324f-dd5c-46b0-b768-26a3741954b3"
                        });
                });

            modelBuilder.Entity("TruckUser", b =>
                {
                    b.Property<int>("TruckUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUnassigned")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TruckUserId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UserId");

                    b.ToTable("TruckUsers");

                    b.HasData(
                        new
                        {
                            TruckUserId = 1,
                            DateAssigned = new DateTime(2024, 2, 21, 12, 50, 12, 455, DateTimeKind.Utc).AddTicks(5773),
                            IsAssigned = true,
                            TruckId = "T1-c2be324f-dd5c-46b0-b768-26a3741954b3",
                            UserId = "U1-b83a8603-fa25-4e0e-9a72-6653e428da08"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "U1-b83a8603-fa25-4e0e-9a72-6653e428da08",
                            PasswordHash = "hashedPassword1",
                            Role = 0,
                            Username = "adminUser"
                        },
                        new
                        {
                            UserId = "U2-af482857-ae5a-4bc4-9162-8336a80dce43",
                            PasswordHash = "hashedPassword2",
                            Role = 1,
                            Username = "standardUser"
                        });
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany("Locations")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Location", "DestinationLocation")
                        .WithMany("DestinationOrders")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderRoll", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderRolls")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RollOfSteel", "RollOfSteel")
                        .WithMany("OrderRolls")
                        .HasForeignKey("RollOfSteelId");

                    b.Navigation("Order");

                    b.Navigation("RollOfSteel");
                });

            modelBuilder.Entity("RollOfSteel", b =>
                {
                    b.HasOne("Location", "CurrentLocation")
                        .WithMany("RollsOfSteel")
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLocation");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.HasOne("Area", "CurrentArea")
                        .WithMany("Trucks")
                        .HasForeignKey("CurrentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany("Trucks")
                        .HasForeignKey("UserId");

                    b.Navigation("CurrentArea");
                });

            modelBuilder.Entity("TruckOrderAssignment", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("TruckOrderAssignments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Truck", "Truck")
                        .WithMany("TruckOrderAssignments")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckUser", b =>
                {
                    b.HasOne("Truck", "Truck")
                        .WithMany("TruckUsers")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("User", "User")
                        .WithMany("TruckUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Area", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("DestinationOrders");

                    b.Navigation("RollsOfSteel");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderRolls");

                    b.Navigation("TruckOrderAssignments");
                });

            modelBuilder.Entity("RollOfSteel", b =>
                {
                    b.Navigation("OrderRolls");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Navigation("TruckOrderAssignments");

                    b.Navigation("TruckUsers");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TruckUsers");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
