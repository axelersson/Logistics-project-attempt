// <auto-generated />
using System;
using LogisticsApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(LogisticsDBContext))]
    partial class LogisticsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Area", b =>
                {
                    b.Property<string>("AreaId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = "A1-9faa3e4d-663e-4c88-a80f-84e7279daf7a",
                            Name = "North Warehouse"
                        },
                        new
                        {
                            AreaId = "A2-641ec683-3771-4b04-8993-cb0f37702591",
                            Name = "South Warehouse"
                        });
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LocationId");

                    b.HasIndex("AreaId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Machine", b =>
                {
                    b.Property<string>("MachineId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AreaID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MachineId");

                    b.ToTable("Machines");
                    b.HasData(
                        new
                        {
                            LocationId = "L1-eb7f8845-6092-44da-8a97-1dd20d9def9b",
                            AreaId = "A1-9faa3e4d-663e-4c88-a80f-84e7279daf7a",
                            LocationType = 0
                        },
                        new
                        {
                            LocationId = "L2-eecfc614-3b89-4ef9-bd4e-c640e76b3274",
                            AreaId = "A2-641ec683-3771-4b04-8993-cb0f37702591",
                            LocationType = 1
                        });
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderRollsOfSteel", b =>
                {
                    b.Property<string>("OrdersOrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RollsOfSteelRollOfSteelId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrdersOrderId", "RollsOfSteelRollOfSteelId");

                    b.HasIndex("RollsOfSteelRollOfSteelId");

                    b.ToTable("OrderRollsOfSteel");
                });

            modelBuilder.Entity("RollOfSteel", b =>
                {
                    b.Property<string>("RollOfSteelId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CurrentLocationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RollOfSteelId");

                    b.HasIndex("CurrentLocationId");

                    b.ToTable("RollsOfSteel");
                    b.HasData(
                        new
                        {
                            OrderId = "O1-5a7bad59-2e44-4614-89c7-18679c6cc074",
                            CreatedAt = new DateTime(2024, 2, 22, 14, 34, 18, 91, DateTimeKind.Utc).AddTicks(7551),
                            FromLocId = "L1-eb7f8845-6092-44da-8a97-1dd20d9def9b",
                            OrderStatus = 0,
                            Pieces = 7,
                            ToLocId = "L2-eecfc614-3b89-4ef9-bd4e-c640e76b3274",
                            UserID = "U1-78bb3bfe-d057-478c-b50f-f79e4ddb3d57"
                        });
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Property<string>("TruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AreaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CurrentAreaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TruckId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CurrentAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("Trucks");
                    b.HasData(
                        new
                        {
                            TruckId = "T1-e0a1a249-fbda-4c74-b4e0-c9d8d8c83261",
                            CurrentAreaId = "A1-9faa3e4d-663e-4c88-a80f-84e7279daf7a"
                        },
                        new
                        {
                            TruckId = "T2-097b6c50-3728-4c93-9e65-5ffa91868e18",
                            CurrentAreaId = "A2-641ec683-3771-4b04-8993-cb0f37702591"
                        });
                });

            modelBuilder.Entity("TruckOrder", b =>
                {
                    b.Property<string>("OrdersOrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TrucksTruckId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrdersOrderId", "TrucksTruckId");

                    b.HasIndex("TrucksTruckId");

                    b.ToTable("TruckOrder");
                    b.HasIndex("OrderId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckOrderAssignments");

                    b.HasData(
                        new
                        {
                            TruckOrderAssignmentId = 1,
                            AssignedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = true,
                            OrderId = "O1-5a7bad59-2e44-4614-89c7-18679c6cc074",
                            TruckId = "T1-e0a1a249-fbda-4c74-b4e0-c9d8d8c83261"
                        });
                });

            modelBuilder.Entity("TruckUser", b =>
                {
                    b.Property<string>("TrucksTruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TrucksTruckId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("TruckUser");
                    b.HasIndex("UserId");

                    b.ToTable("TruckUsers");

                    b.HasData(
                        new
                        {
                            TruckUserId = 1,
                            AssignedAt = new DateTime(2024, 2, 22, 14, 34, 18, 91, DateTimeKind.Utc).AddTicks(7587),
                            IsAssigned = true,
                            TruckId = "T1-e0a1a249-fbda-4c74-b4e0-c9d8d8c83261",
                            UserId = "U1-78bb3bfe-d057-478c-b50f-f79e4ddb3d57"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "U1-78bb3bfe-d057-478c-b50f-f79e4ddb3d57",
                            PasswordHash = "$2a$11$valJRPFPqtCYAwil5TyaZOtPuOPpVMI6gv5yMwTUXDTtj.07kVJEW",
                            Role = 0,
                            Username = "adminUser"
                        },
                        new
                        {
                            UserId = "U2-f351a8af-003b-41e8-bf6d-72e657f794bc",
                            PasswordHash = "hashedPassword2",
                            Role = 1,
                            Username = "standardUser"
                        });
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("OrderRollsOfSteel", b =>
                {
                    b.HasOne("Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollOfSteel", null)
                        .WithMany()
                        .HasForeignKey("RollsOfSteelRollOfSteelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RollOfSteel", b =>
                {
                    b.HasOne("Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLocation");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.HasOne("Area", null)
                        .WithMany("Trucks")
                        .HasForeignKey("AreaId");

                    b.HasOne("Area", "CurrentArea")
                        .WithMany()
                        .HasForeignKey("CurrentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany("Trucks")
                        .HasForeignKey("UserId");

                    b.Navigation("CurrentArea");
                });

            modelBuilder.Entity("TruckOrder", b =>
                {
                    b.HasOne("Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Truck", null)
                        .WithMany()
                        .HasForeignKey("TrucksTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckUser", b =>
                {
                    b.HasOne("Truck", null)
                        .WithMany()
                        .HasForeignKey("TrucksTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Area", b =>
                {
                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("DestinationOrders");

                    b.Navigation("RollsOfSteel");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderRolls");

                    b.Navigation("TruckOrderAssignments");
                });

            modelBuilder.Entity("RollOfSteel", b =>
                {
                    b.Navigation("OrderRolls");
                });

            modelBuilder.Entity("Truck", b =>
                {
                    b.Navigation("TruckOrderAssignments");

                    b.Navigation("TruckUsers");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TruckUsers");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
